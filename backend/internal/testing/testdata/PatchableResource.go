// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "github.com/timp4w/phi/internal/core/kubernetes"
)

// PatchableResource is an autogenerated mock type for the PatchableResource type
type PatchableResource struct {
	mock.Mock
}

type PatchableResource_Expecter struct {
	mock *mock.Mock
}

func (_m *PatchableResource) EXPECT() *PatchableResource_Expecter {
	return &PatchableResource_Expecter{mock: &_m.Mock}
}

// PatchJSON provides a mock function with no fields
func (_m *PatchableResource) PatchJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PatchJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchableResource_PatchJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchJSON'
type PatchableResource_PatchJSON_Call struct {
	*mock.Call
}

// PatchJSON is a helper method to define mock.On call
func (_e *PatchableResource_Expecter) PatchJSON() *PatchableResource_PatchJSON_Call {
	return &PatchableResource_PatchJSON_Call{Call: _e.mock.On("PatchJSON")}
}

func (_c *PatchableResource_PatchJSON_Call) Run(run func()) *PatchableResource_PatchJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchableResource_PatchJSON_Call) Return(_a0 []byte, _a1 error) *PatchableResource_PatchJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PatchableResource_PatchJSON_Call) RunAndReturn(run func() ([]byte, error)) *PatchableResource_PatchJSON_Call {
	_c.Call.Return(run)
	return _c
}

// PatchType provides a mock function with no fields
func (_m *PatchableResource) PatchType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PatchType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PatchableResource_PatchType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchType'
type PatchableResource_PatchType_Call struct {
	*mock.Call
}

// PatchType is a helper method to define mock.On call
func (_e *PatchableResource_Expecter) PatchType() *PatchableResource_PatchType_Call {
	return &PatchableResource_PatchType_Call{Call: _e.mock.On("PatchType")}
}

func (_c *PatchableResource_PatchType_Call) Run(run func()) *PatchableResource_PatchType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchableResource_PatchType_Call) Return(_a0 string) *PatchableResource_PatchType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PatchableResource_PatchType_Call) RunAndReturn(run func() string) *PatchableResource_PatchType_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceMeta provides a mock function with no fields
func (_m *PatchableResource) ResourceMeta() kubernetes.Resource {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceMeta")
	}

	var r0 kubernetes.Resource
	if rf, ok := ret.Get(0).(func() kubernetes.Resource); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kubernetes.Resource)
	}

	return r0
}

// PatchableResource_ResourceMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceMeta'
type PatchableResource_ResourceMeta_Call struct {
	*mock.Call
}

// ResourceMeta is a helper method to define mock.On call
func (_e *PatchableResource_Expecter) ResourceMeta() *PatchableResource_ResourceMeta_Call {
	return &PatchableResource_ResourceMeta_Call{Call: _e.mock.On("ResourceMeta")}
}

func (_c *PatchableResource_ResourceMeta_Call) Run(run func()) *PatchableResource_ResourceMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchableResource_ResourceMeta_Call) Return(_a0 kubernetes.Resource) *PatchableResource_ResourceMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PatchableResource_ResourceMeta_Call) RunAndReturn(run func() kubernetes.Resource) *PatchableResource_ResourceMeta_Call {
	_c.Call.Return(run)
	return _c
}

// NewPatchableResource creates a new instance of PatchableResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatchableResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatchableResource {
	mock := &PatchableResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

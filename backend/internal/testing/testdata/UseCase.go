// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UseCase is an autogenerated mock type for the UseCase type
type UseCase[I interface{}, O interface{}] struct {
	mock.Mock
}

type UseCase_Expecter[I interface{}, O interface{}] struct {
	mock *mock.Mock
}

func (_m *UseCase[I, O]) EXPECT() *UseCase_Expecter[I, O] {
	return &UseCase_Expecter[I, O]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *UseCase[I, O]) Execute(_a0 I) (O, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 O
	var r1 error
	if rf, ok := ret.Get(0).(func(I) (O, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(I) O); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(O)
		}
	}

	if rf, ok := ret.Get(1).(func(I) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type UseCase_Execute_Call[I interface{}, O interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 I
func (_e *UseCase_Expecter[I, O]) Execute(_a0 interface{}) *UseCase_Execute_Call[I, O] {
	return &UseCase_Execute_Call[I, O]{Call: _e.mock.On("Execute", _a0)}
}

func (_c *UseCase_Execute_Call[I, O]) Run(run func(_a0 I)) *UseCase_Execute_Call[I, O] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(I))
	})
	return _c
}

func (_c *UseCase_Execute_Call[I, O]) Return(_a0 O, _a1 error) *UseCase_Execute_Call[I, O] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Execute_Call[I, O]) RunAndReturn(run func(I) (O, error)) *UseCase_Execute_Call[I, O] {
	_c.Call.Return(run)
	return _c
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase[I interface{}, O interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase[I, O] {
	mock := &UseCase[I, O]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

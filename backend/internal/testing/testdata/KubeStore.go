// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "github.com/timp4w/phi/internal/core/kubernetes"
)

// KubeStore is an autogenerated mock type for the KubeStore type
type KubeStore struct {
	mock.Mock
}

type KubeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *KubeStore) EXPECT() *KubeStore_Expecter {
	return &KubeStore_Expecter{mock: &_m.Mock}
}

// FindChildrenResourcesByRef provides a mock function with given fields: ref
func (_m *KubeStore) FindChildrenResourcesByRef(ref string) []kubernetes.Resource {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for FindChildrenResourcesByRef")
	}

	var r0 []kubernetes.Resource
	if rf, ok := ret.Get(0).(func(string) []kubernetes.Resource); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kubernetes.Resource)
		}
	}

	return r0
}

// KubeStore_FindChildrenResourcesByRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindChildrenResourcesByRef'
type KubeStore_FindChildrenResourcesByRef_Call struct {
	*mock.Call
}

// FindChildrenResourcesByRef is a helper method to define mock.On call
//   - ref string
func (_e *KubeStore_Expecter) FindChildrenResourcesByRef(ref interface{}) *KubeStore_FindChildrenResourcesByRef_Call {
	return &KubeStore_FindChildrenResourcesByRef_Call{Call: _e.mock.On("FindChildrenResourcesByRef", ref)}
}

func (_c *KubeStore_FindChildrenResourcesByRef_Call) Run(run func(ref string)) *KubeStore_FindChildrenResourcesByRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KubeStore_FindChildrenResourcesByRef_Call) Return(_a0 []kubernetes.Resource) *KubeStore_FindChildrenResourcesByRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeStore_FindChildrenResourcesByRef_Call) RunAndReturn(run func(string) []kubernetes.Resource) *KubeStore_FindChildrenResourcesByRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceByUID provides a mock function with given fields: uid
func (_m *KubeStore) GetResourceByUID(uid string) *kubernetes.Resource {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceByUID")
	}

	var r0 *kubernetes.Resource
	if rf, ok := ret.Get(0).(func(string) *kubernetes.Resource); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	return r0
}

// KubeStore_GetResourceByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceByUID'
type KubeStore_GetResourceByUID_Call struct {
	*mock.Call
}

// GetResourceByUID is a helper method to define mock.On call
//   - uid string
func (_e *KubeStore_Expecter) GetResourceByUID(uid interface{}) *KubeStore_GetResourceByUID_Call {
	return &KubeStore_GetResourceByUID_Call{Call: _e.mock.On("GetResourceByUID", uid)}
}

func (_c *KubeStore_GetResourceByUID_Call) Run(run func(uid string)) *KubeStore_GetResourceByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KubeStore_GetResourceByUID_Call) Return(_a0 *kubernetes.Resource) *KubeStore_GetResourceByUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeStore_GetResourceByUID_Call) RunAndReturn(run func(string) *kubernetes.Resource) *KubeStore_GetResourceByUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function with no fields
func (_m *KubeStore) GetResources() map[string]kubernetes.Resource {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 map[string]kubernetes.Resource
	if rf, ok := ret.Get(0).(func() map[string]kubernetes.Resource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]kubernetes.Resource)
		}
	}

	return r0
}

// KubeStore_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type KubeStore_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
func (_e *KubeStore_Expecter) GetResources() *KubeStore_GetResources_Call {
	return &KubeStore_GetResources_Call{Call: _e.mock.On("GetResources")}
}

func (_c *KubeStore_GetResources_Call) Run(run func()) *KubeStore_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeStore_GetResources_Call) Return(_a0 map[string]kubernetes.Resource) *KubeStore_GetResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeStore_GetResources_Call) RunAndReturn(run func() map[string]kubernetes.Resource) *KubeStore_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterResource provides a mock function with given fields: resource
func (_m *KubeStore) RegisterResource(resource *kubernetes.Resource) {
	_m.Called(resource)
}

// KubeStore_RegisterResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterResource'
type KubeStore_RegisterResource_Call struct {
	*mock.Call
}

// RegisterResource is a helper method to define mock.On call
//   - resource *kubernetes.Resource
func (_e *KubeStore_Expecter) RegisterResource(resource interface{}) *KubeStore_RegisterResource_Call {
	return &KubeStore_RegisterResource_Call{Call: _e.mock.On("RegisterResource", resource)}
}

func (_c *KubeStore_RegisterResource_Call) Run(run func(resource *kubernetes.Resource)) *KubeStore_RegisterResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*kubernetes.Resource))
	})
	return _c
}

func (_c *KubeStore_RegisterResource_Call) Return() *KubeStore_RegisterResource_Call {
	_c.Call.Return()
	return _c
}

func (_c *KubeStore_RegisterResource_Call) RunAndReturn(run func(*kubernetes.Resource)) *KubeStore_RegisterResource_Call {
	_c.Run(run)
	return _c
}

// RemoveResource provides a mock function with given fields: uid
func (_m *KubeStore) RemoveResource(uid string) {
	_m.Called(uid)
}

// KubeStore_RemoveResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveResource'
type KubeStore_RemoveResource_Call struct {
	*mock.Call
}

// RemoveResource is a helper method to define mock.On call
//   - uid string
func (_e *KubeStore_Expecter) RemoveResource(uid interface{}) *KubeStore_RemoveResource_Call {
	return &KubeStore_RemoveResource_Call{Call: _e.mock.On("RemoveResource", uid)}
}

func (_c *KubeStore_RemoveResource_Call) Run(run func(uid string)) *KubeStore_RemoveResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KubeStore_RemoveResource_Call) Return() *KubeStore_RemoveResource_Call {
	_c.Call.Return()
	return _c
}

func (_c *KubeStore_RemoveResource_Call) RunAndReturn(run func(string)) *KubeStore_RemoveResource_Call {
	_c.Run(run)
	return _c
}

// SetResources provides a mock function with given fields: resources
func (_m *KubeStore) SetResources(resources map[string]*kubernetes.Resource) map[string]*kubernetes.Resource {
	ret := _m.Called(resources)

	if len(ret) == 0 {
		panic("no return value specified for SetResources")
	}

	var r0 map[string]*kubernetes.Resource
	if rf, ok := ret.Get(0).(func(map[string]*kubernetes.Resource) map[string]*kubernetes.Resource); ok {
		r0 = rf(resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*kubernetes.Resource)
		}
	}

	return r0
}

// KubeStore_SetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResources'
type KubeStore_SetResources_Call struct {
	*mock.Call
}

// SetResources is a helper method to define mock.On call
//   - resources map[string]*kubernetes.Resource
func (_e *KubeStore_Expecter) SetResources(resources interface{}) *KubeStore_SetResources_Call {
	return &KubeStore_SetResources_Call{Call: _e.mock.On("SetResources", resources)}
}

func (_c *KubeStore_SetResources_Call) Run(run func(resources map[string]*kubernetes.Resource)) *KubeStore_SetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]*kubernetes.Resource))
	})
	return _c
}

func (_c *KubeStore_SetResources_Call) Return(_a0 map[string]*kubernetes.Resource) *KubeStore_SetResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeStore_SetResources_Call) RunAndReturn(run func(map[string]*kubernetes.Resource) map[string]*kubernetes.Resource) *KubeStore_SetResources_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResource provides a mock function with given fields: newResource
func (_m *KubeStore) UpdateResource(newResource kubernetes.Resource) *kubernetes.Resource {
	ret := _m.Called(newResource)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *kubernetes.Resource
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) *kubernetes.Resource); ok {
		r0 = rf(newResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	return r0
}

// KubeStore_UpdateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResource'
type KubeStore_UpdateResource_Call struct {
	*mock.Call
}

// UpdateResource is a helper method to define mock.On call
//   - newResource kubernetes.Resource
func (_e *KubeStore_Expecter) UpdateResource(newResource interface{}) *KubeStore_UpdateResource_Call {
	return &KubeStore_UpdateResource_Call{Call: _e.mock.On("UpdateResource", newResource)}
}

func (_c *KubeStore_UpdateResource_Call) Run(run func(newResource kubernetes.Resource)) *KubeStore_UpdateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource))
	})
	return _c
}

func (_c *KubeStore_UpdateResource_Call) Return(_a0 *kubernetes.Resource) *KubeStore_UpdateResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeStore_UpdateResource_Call) RunAndReturn(run func(kubernetes.Resource) *kubernetes.Resource) *KubeStore_UpdateResource_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubeStore creates a new instance of KubeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubeStore {
	mock := &KubeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "github.com/timp4w/phi/internal/core/kubernetes"
)

// FluxService is an autogenerated mock type for the FluxService type
type FluxService struct {
	mock.Mock
}

type FluxService_Expecter struct {
	mock *mock.Mock
}

func (_m *FluxService) EXPECT() *FluxService_Expecter {
	return &FluxService_Expecter{mock: &_m.Mock}
}

// Reconcile provides a mock function with given fields: el
func (_m *FluxService) Reconcile(el kubernetes.Resource) (*kubernetes.Resource, error) {
	ret := _m.Called(el)

	if len(ret) == 0 {
		panic("no return value specified for Reconcile")
	}

	var r0 *kubernetes.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) (*kubernetes.Resource, error)); ok {
		return rf(el)
	}
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) *kubernetes.Resource); ok {
		r0 = rf(el)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(kubernetes.Resource) error); ok {
		r1 = rf(el)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FluxService_Reconcile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconcile'
type FluxService_Reconcile_Call struct {
	*mock.Call
}

// Reconcile is a helper method to define mock.On call
//   - el kubernetes.Resource
func (_e *FluxService_Expecter) Reconcile(el interface{}) *FluxService_Reconcile_Call {
	return &FluxService_Reconcile_Call{Call: _e.mock.On("Reconcile", el)}
}

func (_c *FluxService_Reconcile_Call) Run(run func(el kubernetes.Resource)) *FluxService_Reconcile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource))
	})
	return _c
}

func (_c *FluxService_Reconcile_Call) Return(_a0 *kubernetes.Resource, _a1 error) *FluxService_Reconcile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FluxService_Reconcile_Call) RunAndReturn(run func(kubernetes.Resource) (*kubernetes.Resource, error)) *FluxService_Reconcile_Call {
	_c.Call.Return(run)
	return _c
}

// Resume provides a mock function with given fields: el
func (_m *FluxService) Resume(el kubernetes.Resource) (*kubernetes.Resource, error) {
	ret := _m.Called(el)

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 *kubernetes.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) (*kubernetes.Resource, error)); ok {
		return rf(el)
	}
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) *kubernetes.Resource); ok {
		r0 = rf(el)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(kubernetes.Resource) error); ok {
		r1 = rf(el)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FluxService_Resume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resume'
type FluxService_Resume_Call struct {
	*mock.Call
}

// Resume is a helper method to define mock.On call
//   - el kubernetes.Resource
func (_e *FluxService_Expecter) Resume(el interface{}) *FluxService_Resume_Call {
	return &FluxService_Resume_Call{Call: _e.mock.On("Resume", el)}
}

func (_c *FluxService_Resume_Call) Run(run func(el kubernetes.Resource)) *FluxService_Resume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource))
	})
	return _c
}

func (_c *FluxService_Resume_Call) Return(_a0 *kubernetes.Resource, _a1 error) *FluxService_Resume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FluxService_Resume_Call) RunAndReturn(run func(kubernetes.Resource) (*kubernetes.Resource, error)) *FluxService_Resume_Call {
	_c.Call.Return(run)
	return _c
}

// Suspend provides a mock function with given fields: el
func (_m *FluxService) Suspend(el kubernetes.Resource) (*kubernetes.Resource, error) {
	ret := _m.Called(el)

	if len(ret) == 0 {
		panic("no return value specified for Suspend")
	}

	var r0 *kubernetes.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) (*kubernetes.Resource, error)); ok {
		return rf(el)
	}
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) *kubernetes.Resource); ok {
		r0 = rf(el)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(kubernetes.Resource) error); ok {
		r1 = rf(el)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FluxService_Suspend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Suspend'
type FluxService_Suspend_Call struct {
	*mock.Call
}

// Suspend is a helper method to define mock.On call
//   - el kubernetes.Resource
func (_e *FluxService_Expecter) Suspend(el interface{}) *FluxService_Suspend_Call {
	return &FluxService_Suspend_Call{Call: _e.mock.On("Suspend", el)}
}

func (_c *FluxService_Suspend_Call) Run(run func(el kubernetes.Resource)) *FluxService_Suspend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource))
	})
	return _c
}

func (_c *FluxService_Suspend_Call) Return(_a0 *kubernetes.Resource, _a1 error) *FluxService_Suspend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FluxService_Suspend_Call) RunAndReturn(run func(kubernetes.Resource) (*kubernetes.Resource, error)) *FluxService_Suspend_Call {
	_c.Call.Return(run)
	return _c
}

// NewFluxService creates a new instance of FluxService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFluxService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FluxService {
	mock := &FluxService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kubernetes "github.com/timp4w/phi/internal/core/kubernetes"
)

// KubeService is an autogenerated mock type for the KubeService type
type KubeService struct {
	mock.Mock
}

type KubeService_Expecter struct {
	mock *mock.Mock
}

func (_m *KubeService) EXPECT() *KubeService_Expecter {
	return &KubeService_Expecter{mock: &_m.Mock}
}

// DiscoverApis provides a mock function with no fields
func (_m *KubeService) DiscoverApis() (*kubernetes.ResourceMap, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoverApis")
	}

	var r0 *kubernetes.ResourceMap
	var r1 error
	if rf, ok := ret.Get(0).(func() (*kubernetes.ResourceMap, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *kubernetes.ResourceMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.ResourceMap)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeService_DiscoverApis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverApis'
type KubeService_DiscoverApis_Call struct {
	*mock.Call
}

// DiscoverApis is a helper method to define mock.On call
func (_e *KubeService_Expecter) DiscoverApis() *KubeService_DiscoverApis_Call {
	return &KubeService_DiscoverApis_Call{Call: _e.mock.On("DiscoverApis")}
}

func (_c *KubeService_DiscoverApis_Call) Run(run func()) *KubeService_DiscoverApis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeService_DiscoverApis_Call) Return(_a0 *kubernetes.ResourceMap, _a1 error) *KubeService_DiscoverApis_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubeService_DiscoverApis_Call) RunAndReturn(run func() (*kubernetes.ResourceMap, error)) *KubeService_DiscoverApis_Call {
	_c.Call.Return(run)
	return _c
}

// DiscoverResources provides a mock function with given fields: rm
func (_m *KubeService) DiscoverResources(rm *kubernetes.ResourceMap) (map[string]*kubernetes.Resource, error) {
	ret := _m.Called(rm)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverResources")
	}

	var r0 map[string]*kubernetes.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(*kubernetes.ResourceMap) (map[string]*kubernetes.Resource, error)); ok {
		return rf(rm)
	}
	if rf, ok := ret.Get(0).(func(*kubernetes.ResourceMap) map[string]*kubernetes.Resource); ok {
		r0 = rf(rm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*kubernetes.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(*kubernetes.ResourceMap) error); ok {
		r1 = rf(rm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeService_DiscoverResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverResources'
type KubeService_DiscoverResources_Call struct {
	*mock.Call
}

// DiscoverResources is a helper method to define mock.On call
//   - rm *kubernetes.ResourceMap
func (_e *KubeService_Expecter) DiscoverResources(rm interface{}) *KubeService_DiscoverResources_Call {
	return &KubeService_DiscoverResources_Call{Call: _e.mock.On("DiscoverResources", rm)}
}

func (_c *KubeService_DiscoverResources_Call) Run(run func(rm *kubernetes.ResourceMap)) *KubeService_DiscoverResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*kubernetes.ResourceMap))
	})
	return _c
}

func (_c *KubeService_DiscoverResources_Call) Return(_a0 map[string]*kubernetes.Resource, _a1 error) *KubeService_DiscoverResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubeService_DiscoverResources_Call) RunAndReturn(run func(*kubernetes.ResourceMap) (map[string]*kubernetes.Resource, error)) *KubeService_DiscoverResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with no fields
func (_m *KubeService) GetEvents() ([]kubernetes.Event, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []kubernetes.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]kubernetes.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []kubernetes.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kubernetes.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeService_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type KubeService_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
func (_e *KubeService_Expecter) GetEvents() *KubeService_GetEvents_Call {
	return &KubeService_GetEvents_Call{Call: _e.mock.On("GetEvents")}
}

func (_c *KubeService_GetEvents_Call) Run(run func()) *KubeService_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeService_GetEvents_Call) Return(_a0 []kubernetes.Event, _a1 error) *KubeService_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubeService_GetEvents_Call) RunAndReturn(run func() ([]kubernetes.Event, error)) *KubeService_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetInformerChannels provides a mock function with no fields
func (_m *KubeService) GetInformerChannels() map[string]chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInformerChannels")
	}

	var r0 map[string]chan struct{}
	if rf, ok := ret.Get(0).(func() map[string]chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]chan struct{})
		}
	}

	return r0
}

// KubeService_GetInformerChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInformerChannels'
type KubeService_GetInformerChannels_Call struct {
	*mock.Call
}

// GetInformerChannels is a helper method to define mock.On call
func (_e *KubeService_Expecter) GetInformerChannels() *KubeService_GetInformerChannels_Call {
	return &KubeService_GetInformerChannels_Call{Call: _e.mock.On("GetInformerChannels")}
}

func (_c *KubeService_GetInformerChannels_Call) Run(run func()) *KubeService_GetInformerChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeService_GetInformerChannels_Call) Return(_a0 map[string]chan struct{}) *KubeService_GetInformerChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeService_GetInformerChannels_Call) RunAndReturn(run func() map[string]chan struct{}) *KubeService_GetInformerChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceYAML provides a mock function with given fields: resource
func (_m *KubeService) GetResourceYAML(resource kubernetes.Resource) ([]byte, error) {
	ret := _m.Called(resource)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceYAML")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) ([]byte, error)); ok {
		return rf(resource)
	}
	if rf, ok := ret.Get(0).(func(kubernetes.Resource) []byte); ok {
		r0 = rf(resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(kubernetes.Resource) error); ok {
		r1 = rf(resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeService_GetResourceYAML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceYAML'
type KubeService_GetResourceYAML_Call struct {
	*mock.Call
}

// GetResourceYAML is a helper method to define mock.On call
//   - resource kubernetes.Resource
func (_e *KubeService_Expecter) GetResourceYAML(resource interface{}) *KubeService_GetResourceYAML_Call {
	return &KubeService_GetResourceYAML_Call{Call: _e.mock.On("GetResourceYAML", resource)}
}

func (_c *KubeService_GetResourceYAML_Call) Run(run func(resource kubernetes.Resource)) *KubeService_GetResourceYAML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource))
	})
	return _c
}

func (_c *KubeService_GetResourceYAML_Call) Return(_a0 []byte, _a1 error) *KubeService_GetResourceYAML_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubeService_GetResourceYAML_Call) RunAndReturn(run func(kubernetes.Resource) ([]byte, error)) *KubeService_GetResourceYAML_Call {
	_c.Call.Return(run)
	return _c
}

// PatchResource provides a mock function with given fields: pr
func (_m *KubeService) PatchResource(pr kubernetes.PatchableResource) (*kubernetes.Resource, error) {
	ret := _m.Called(pr)

	if len(ret) == 0 {
		panic("no return value specified for PatchResource")
	}

	var r0 *kubernetes.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(kubernetes.PatchableResource) (*kubernetes.Resource, error)); ok {
		return rf(pr)
	}
	if rf, ok := ret.Get(0).(func(kubernetes.PatchableResource) *kubernetes.Resource); ok {
		r0 = rf(pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(kubernetes.PatchableResource) error); ok {
		r1 = rf(pr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeService_PatchResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchResource'
type KubeService_PatchResource_Call struct {
	*mock.Call
}

// PatchResource is a helper method to define mock.On call
//   - pr kubernetes.PatchableResource
func (_e *KubeService_Expecter) PatchResource(pr interface{}) *KubeService_PatchResource_Call {
	return &KubeService_PatchResource_Call{Call: _e.mock.On("PatchResource", pr)}
}

func (_c *KubeService_PatchResource_Call) Run(run func(pr kubernetes.PatchableResource)) *KubeService_PatchResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.PatchableResource))
	})
	return _c
}

func (_c *KubeService_PatchResource_Call) Return(_a0 *kubernetes.Resource, _a1 error) *KubeService_PatchResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubeService_PatchResource_Call) RunAndReturn(run func(kubernetes.PatchableResource) (*kubernetes.Resource, error)) *KubeService_PatchResource_Call {
	_c.Call.Return(run)
	return _c
}

// WatchEvents provides a mock function with given fields: onEvent
func (_m *KubeService) WatchEvents(onEvent func(*kubernetes.Event)) {
	_m.Called(onEvent)
}

// KubeService_WatchEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchEvents'
type KubeService_WatchEvents_Call struct {
	*mock.Call
}

// WatchEvents is a helper method to define mock.On call
//   - onEvent func(*kubernetes.Event)
func (_e *KubeService_Expecter) WatchEvents(onEvent interface{}) *KubeService_WatchEvents_Call {
	return &KubeService_WatchEvents_Call{Call: _e.mock.On("WatchEvents", onEvent)}
}

func (_c *KubeService_WatchEvents_Call) Run(run func(onEvent func(*kubernetes.Event))) *KubeService_WatchEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*kubernetes.Event)))
	})
	return _c
}

func (_c *KubeService_WatchEvents_Call) Return() *KubeService_WatchEvents_Call {
	_c.Call.Return()
	return _c
}

func (_c *KubeService_WatchEvents_Call) RunAndReturn(run func(func(*kubernetes.Event))) *KubeService_WatchEvents_Call {
	_c.Run(run)
	return _c
}

// WatchLogs provides a mock function with given fields: pod, ctx, onLog
func (_m *KubeService) WatchLogs(pod kubernetes.Resource, ctx context.Context, onLog func(kubernetes.KubeLog)) error {
	ret := _m.Called(pod, ctx, onLog)

	if len(ret) == 0 {
		panic("no return value specified for WatchLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(kubernetes.Resource, context.Context, func(kubernetes.KubeLog)) error); ok {
		r0 = rf(pod, ctx, onLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KubeService_WatchLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchLogs'
type KubeService_WatchLogs_Call struct {
	*mock.Call
}

// WatchLogs is a helper method to define mock.On call
//   - pod kubernetes.Resource
//   - ctx context.Context
//   - onLog func(kubernetes.KubeLog)
func (_e *KubeService_Expecter) WatchLogs(pod interface{}, ctx interface{}, onLog interface{}) *KubeService_WatchLogs_Call {
	return &KubeService_WatchLogs_Call{Call: _e.mock.On("WatchLogs", pod, ctx, onLog)}
}

func (_c *KubeService_WatchLogs_Call) Run(run func(pod kubernetes.Resource, ctx context.Context, onLog func(kubernetes.KubeLog))) *KubeService_WatchLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource), args[1].(context.Context), args[2].(func(kubernetes.KubeLog)))
	})
	return _c
}

func (_c *KubeService_WatchLogs_Call) Return(_a0 error) *KubeService_WatchLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeService_WatchLogs_Call) RunAndReturn(run func(kubernetes.Resource, context.Context, func(kubernetes.KubeLog)) error) *KubeService_WatchLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WatchResources provides a mock function with given fields: kinds, addFunc, updateFunc, deleteFunc
func (_m *KubeService) WatchResources(kinds map[string]struct{}, addFunc func(kubernetes.Resource), updateFunc func(kubernetes.Resource, kubernetes.Resource), deleteFunc func(kubernetes.Resource)) {
	_m.Called(kinds, addFunc, updateFunc, deleteFunc)
}

// KubeService_WatchResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchResources'
type KubeService_WatchResources_Call struct {
	*mock.Call
}

// WatchResources is a helper method to define mock.On call
//   - kinds map[string]struct{}
//   - addFunc func(kubernetes.Resource)
//   - updateFunc func(kubernetes.Resource , kubernetes.Resource)
//   - deleteFunc func(kubernetes.Resource)
func (_e *KubeService_Expecter) WatchResources(kinds interface{}, addFunc interface{}, updateFunc interface{}, deleteFunc interface{}) *KubeService_WatchResources_Call {
	return &KubeService_WatchResources_Call{Call: _e.mock.On("WatchResources", kinds, addFunc, updateFunc, deleteFunc)}
}

func (_c *KubeService_WatchResources_Call) Run(run func(kinds map[string]struct{}, addFunc func(kubernetes.Resource), updateFunc func(kubernetes.Resource, kubernetes.Resource), deleteFunc func(kubernetes.Resource))) *KubeService_WatchResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]struct{}), args[1].(func(kubernetes.Resource)), args[2].(func(kubernetes.Resource, kubernetes.Resource)), args[3].(func(kubernetes.Resource)))
	})
	return _c
}

func (_c *KubeService_WatchResources_Call) Return() *KubeService_WatchResources_Call {
	_c.Call.Return()
	return _c
}

func (_c *KubeService_WatchResources_Call) RunAndReturn(run func(map[string]struct{}, func(kubernetes.Resource), func(kubernetes.Resource, kubernetes.Resource), func(kubernetes.Resource))) *KubeService_WatchResources_Call {
	_c.Run(run)
	return _c
}

// NewKubeService creates a new instance of KubeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubeService {
	mock := &KubeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

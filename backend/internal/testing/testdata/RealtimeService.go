// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	realtime "github.com/timp4w/phi/internal/core/realtime"
)

// RealtimeService is an autogenerated mock type for the RealtimeService type
type RealtimeService struct {
	mock.Mock
}

type RealtimeService_Expecter struct {
	mock *mock.Mock
}

func (_m *RealtimeService) EXPECT() *RealtimeService_Expecter {
	return &RealtimeService_Expecter{mock: &_m.Mock}
}

// AddConnectionListener provides a mock function with given fields: listener
func (_m *RealtimeService) AddConnectionListener(listener realtime.Listener) {
	_m.Called(listener)
}

// RealtimeService_AddConnectionListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnectionListener'
type RealtimeService_AddConnectionListener_Call struct {
	*mock.Call
}

// AddConnectionListener is a helper method to define mock.On call
//   - listener realtime.Listener
func (_e *RealtimeService_Expecter) AddConnectionListener(listener interface{}) *RealtimeService_AddConnectionListener_Call {
	return &RealtimeService_AddConnectionListener_Call{Call: _e.mock.On("AddConnectionListener", listener)}
}

func (_c *RealtimeService_AddConnectionListener_Call) Run(run func(listener realtime.Listener)) *RealtimeService_AddConnectionListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(realtime.Listener))
	})
	return _c
}

func (_c *RealtimeService_AddConnectionListener_Call) Return() *RealtimeService_AddConnectionListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *RealtimeService_AddConnectionListener_Call) RunAndReturn(run func(realtime.Listener)) *RealtimeService_AddConnectionListener_Call {
	_c.Run(run)
	return _c
}

// Broadcast provides a mock function with given fields: message
func (_m *RealtimeService) Broadcast(message realtime.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Broadcast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(realtime.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RealtimeService_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type RealtimeService_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - message realtime.Message
func (_e *RealtimeService_Expecter) Broadcast(message interface{}) *RealtimeService_Broadcast_Call {
	return &RealtimeService_Broadcast_Call{Call: _e.mock.On("Broadcast", message)}
}

func (_c *RealtimeService_Broadcast_Call) Run(run func(message realtime.Message)) *RealtimeService_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(realtime.Message))
	})
	return _c
}

func (_c *RealtimeService_Broadcast_Call) Return(_a0 error) *RealtimeService_Broadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RealtimeService_Broadcast_Call) RunAndReturn(run func(realtime.Message) error) *RealtimeService_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterListener provides a mock function with given fields: listener
func (_m *RealtimeService) RegisterListener(listener realtime.MessageListener) {
	_m.Called(listener)
}

// RealtimeService_RegisterListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterListener'
type RealtimeService_RegisterListener_Call struct {
	*mock.Call
}

// RegisterListener is a helper method to define mock.On call
//   - listener realtime.MessageListener
func (_e *RealtimeService_Expecter) RegisterListener(listener interface{}) *RealtimeService_RegisterListener_Call {
	return &RealtimeService_RegisterListener_Call{Call: _e.mock.On("RegisterListener", listener)}
}

func (_c *RealtimeService_RegisterListener_Call) Run(run func(listener realtime.MessageListener)) *RealtimeService_RegisterListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(realtime.MessageListener))
	})
	return _c
}

func (_c *RealtimeService_RegisterListener_Call) Return() *RealtimeService_RegisterListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *RealtimeService_RegisterListener_Call) RunAndReturn(run func(realtime.MessageListener)) *RealtimeService_RegisterListener_Call {
	_c.Run(run)
	return _c
}

// RemoveClientById provides a mock function with given fields: clientId
func (_m *RealtimeService) RemoveClientById(clientId string) {
	_m.Called(clientId)
}

// RealtimeService_RemoveClientById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientById'
type RealtimeService_RemoveClientById_Call struct {
	*mock.Call
}

// RemoveClientById is a helper method to define mock.On call
//   - clientId string
func (_e *RealtimeService_Expecter) RemoveClientById(clientId interface{}) *RealtimeService_RemoveClientById_Call {
	return &RealtimeService_RemoveClientById_Call{Call: _e.mock.On("RemoveClientById", clientId)}
}

func (_c *RealtimeService_RemoveClientById_Call) Run(run func(clientId string)) *RealtimeService_RemoveClientById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RealtimeService_RemoveClientById_Call) Return() *RealtimeService_RemoveClientById_Call {
	_c.Call.Return()
	return _c
}

func (_c *RealtimeService_RemoveClientById_Call) RunAndReturn(run func(string)) *RealtimeService_RemoveClientById_Call {
	_c.Run(run)
	return _c
}

// RemoveConnectionListener provides a mock function with given fields: ID
func (_m *RealtimeService) RemoveConnectionListener(ID string) {
	_m.Called(ID)
}

// RealtimeService_RemoveConnectionListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnectionListener'
type RealtimeService_RemoveConnectionListener_Call struct {
	*mock.Call
}

// RemoveConnectionListener is a helper method to define mock.On call
//   - ID string
func (_e *RealtimeService_Expecter) RemoveConnectionListener(ID interface{}) *RealtimeService_RemoveConnectionListener_Call {
	return &RealtimeService_RemoveConnectionListener_Call{Call: _e.mock.On("RemoveConnectionListener", ID)}
}

func (_c *RealtimeService_RemoveConnectionListener_Call) Run(run func(ID string)) *RealtimeService_RemoveConnectionListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RealtimeService_RemoveConnectionListener_Call) Return() *RealtimeService_RemoveConnectionListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *RealtimeService_RemoveConnectionListener_Call) RunAndReturn(run func(string)) *RealtimeService_RemoveConnectionListener_Call {
	_c.Run(run)
	return _c
}

// SendMessage provides a mock function with given fields: message, clientId
func (_m *RealtimeService) SendMessage(message realtime.Message, clientId string) error {
	ret := _m.Called(message, clientId)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(realtime.Message, string) error); ok {
		r0 = rf(message, clientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RealtimeService_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type RealtimeService_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - message realtime.Message
//   - clientId string
func (_e *RealtimeService_Expecter) SendMessage(message interface{}, clientId interface{}) *RealtimeService_SendMessage_Call {
	return &RealtimeService_SendMessage_Call{Call: _e.mock.On("SendMessage", message, clientId)}
}

func (_c *RealtimeService_SendMessage_Call) Run(run func(message realtime.Message, clientId string)) *RealtimeService_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(realtime.Message), args[1].(string))
	})
	return _c
}

func (_c *RealtimeService_SendMessage_Call) Return(_a0 error) *RealtimeService_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RealtimeService_SendMessage_Call) RunAndReturn(run func(realtime.Message, string) error) *RealtimeService_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: w, r
func (_m *RealtimeService) Upgrade(w http.ResponseWriter, r *http.Request) (string, error) {
	ret := _m.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) (string, error)); ok {
		return rf(w, r)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) string); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request) error); ok {
		r1 = rf(w, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RealtimeService_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type RealtimeService_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *RealtimeService_Expecter) Upgrade(w interface{}, r interface{}) *RealtimeService_Upgrade_Call {
	return &RealtimeService_Upgrade_Call{Call: _e.mock.On("Upgrade", w, r)}
}

func (_c *RealtimeService_Upgrade_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *RealtimeService_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *RealtimeService_Upgrade_Call) Return(_a0 string, _a1 error) *RealtimeService_Upgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RealtimeService_Upgrade_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request) (string, error)) *RealtimeService_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// NewRealtimeService creates a new instance of RealtimeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRealtimeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RealtimeService {
	mock := &RealtimeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

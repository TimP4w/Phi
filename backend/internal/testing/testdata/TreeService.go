// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	kubernetes "github.com/timp4w/phi/internal/core/kubernetes"

	tree "github.com/timp4w/phi/internal/core/tree"
)

// TreeService is an autogenerated mock type for the TreeService type
type TreeService struct {
	mock.Mock
}

type TreeService_Expecter struct {
	mock *mock.Mock
}

func (_m *TreeService) EXPECT() *TreeService_Expecter {
	return &TreeService_Expecter{mock: &_m.Mock}
}

// FindNodeByUID provides a mock function with given fields: uid
func (_m *TreeService) FindNodeByUID(uid string) *kubernetes.Resource {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for FindNodeByUID")
	}

	var r0 *kubernetes.Resource
	if rf, ok := ret.Get(0).(func(string) *kubernetes.Resource); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	return r0
}

// TreeService_FindNodeByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNodeByUID'
type TreeService_FindNodeByUID_Call struct {
	*mock.Call
}

// FindNodeByUID is a helper method to define mock.On call
//   - uid string
func (_e *TreeService_Expecter) FindNodeByUID(uid interface{}) *TreeService_FindNodeByUID_Call {
	return &TreeService_FindNodeByUID_Call{Call: _e.mock.On("FindNodeByUID", uid)}
}

func (_c *TreeService_FindNodeByUID_Call) Run(run func(uid string)) *TreeService_FindNodeByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TreeService_FindNodeByUID_Call) Return(_a0 *kubernetes.Resource) *TreeService_FindNodeByUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TreeService_FindNodeByUID_Call) RunAndReturn(run func(string) *kubernetes.Resource) *TreeService_FindNodeByUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTree provides a mock function with no fields
func (_m *TreeService) GetTree() *tree.Tree {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTree")
	}

	var r0 *tree.Tree
	if rf, ok := ret.Get(0).(func() *tree.Tree); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tree.Tree)
		}
	}

	return r0
}

// TreeService_GetTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTree'
type TreeService_GetTree_Call struct {
	*mock.Call
}

// GetTree is a helper method to define mock.On call
func (_e *TreeService_Expecter) GetTree() *TreeService_GetTree_Call {
	return &TreeService_GetTree_Call{Call: _e.mock.On("GetTree")}
}

func (_c *TreeService_GetTree_Call) Run(run func()) *TreeService_GetTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TreeService_GetTree_Call) Return(_a0 *tree.Tree) *TreeService_GetTree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TreeService_GetTree_Call) RunAndReturn(run func() *tree.Tree) *TreeService_GetTree_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueResourceAPIRefs provides a mock function with no fields
func (_m *TreeService) GetUniqueResourceAPIRefs() map[string]struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueResourceAPIRefs")
	}

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func() map[string]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	return r0
}

// TreeService_GetUniqueResourceAPIRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueResourceAPIRefs'
type TreeService_GetUniqueResourceAPIRefs_Call struct {
	*mock.Call
}

// GetUniqueResourceAPIRefs is a helper method to define mock.On call
func (_e *TreeService_Expecter) GetUniqueResourceAPIRefs() *TreeService_GetUniqueResourceAPIRefs_Call {
	return &TreeService_GetUniqueResourceAPIRefs_Call{Call: _e.mock.On("GetUniqueResourceAPIRefs")}
}

func (_c *TreeService_GetUniqueResourceAPIRefs_Call) Run(run func()) *TreeService_GetUniqueResourceAPIRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TreeService_GetUniqueResourceAPIRefs_Call) Return(_a0 map[string]struct{}) *TreeService_GetUniqueResourceAPIRefs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TreeService_GetUniqueResourceAPIRefs_Call) RunAndReturn(run func() map[string]struct{}) *TreeService_GetUniqueResourceAPIRefs_Call {
	_c.Call.Return(run)
	return _c
}

// SetTree provides a mock function with given fields: root
func (_m *TreeService) SetTree(root kubernetes.Resource) {
	_m.Called(root)
}

// TreeService_SetTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTree'
type TreeService_SetTree_Call struct {
	*mock.Call
}

// SetTree is a helper method to define mock.On call
//   - root kubernetes.Resource
func (_e *TreeService_Expecter) SetTree(root interface{}) *TreeService_SetTree_Call {
	return &TreeService_SetTree_Call{Call: _e.mock.On("SetTree", root)}
}

func (_c *TreeService_SetTree_Call) Run(run func(root kubernetes.Resource)) *TreeService_SetTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubernetes.Resource))
	})
	return _c
}

func (_c *TreeService_SetTree_Call) Return() *TreeService_SetTree_Call {
	_c.Call.Return()
	return _c
}

func (_c *TreeService_SetTree_Call) RunAndReturn(run func(kubernetes.Resource)) *TreeService_SetTree_Call {
	_c.Run(run)
	return _c
}

// NewTreeService creates a new instance of TreeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTreeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TreeService {
	mock := &TreeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

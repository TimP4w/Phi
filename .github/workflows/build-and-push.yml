name: Build and Push

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"
          cache-dependency-path: web/yarn.lock

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build all
        run: |
          make build

      - name: Get latest tag and generate new semver
        id: versioning
        run: |
          latest_tag=$(git tag --list 'v*' | sort -V | tail -n 1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v0.1.0"
          fi
          new_version=$(echo "$latest_tag" | awk -F. -v OFS=. '{print $1, $2, $3+1"-dev"}')
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "Generated new version: $new_version"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Development Release ${{ env.new_version }}"
          draft: false
          prerelease: true

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and Push Docker Images
        run: |
          docker build -t ghcr.io/timp4w/phi:${{ env.new_version }} -f docker/Dockerfile .
          docker push ghcr.io/timp4w/phi:${{ env.new_version }}
